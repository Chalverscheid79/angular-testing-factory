name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Build package
      run: npm run build
      
    - name: Run tests
      run: npm test
      
    - name: Run coverage tests
      run: npm run test:coverage
    
    - name: Upload coverage reports
      if: matrix.node-version == '20'
      uses: codecov/codecov-action@v3
      
  publish:
    needs: test
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Validate coverage before publish
      run: npm run test:coverage
      
    - name: Get current version
      id: current_version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Auto-increment version based on commit messages
      id: version_bump
      run: |
        # Check if commit contains breaking changes or features
        if [[ "${{ github.event.head_commit.message }}" == *"BREAKING CHANGE"* ]]; then
          echo "bump=major" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.head_commit.message }}" =~ ^[a-z]+\!: ]]; then
          echo "bump=major" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.head_commit.message }}" == feat* ]]; then
          echo "bump=minor" >> $GITHUB_OUTPUT
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
        fi
        
    - name: Bump version
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        npm version ${{ steps.version_bump.outputs.bump }} --no-git-tag-version
        
    - name: Get new version
      id: new_version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        
    - name: Commit version bump
      run: |
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }} [skip ci]"
        git tag v${{ steps.new_version.outputs.version }}
        git push origin main --tags
    
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
